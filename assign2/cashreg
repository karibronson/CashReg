#!/bin/bash
shopt -s extglob
let firstOrder=0; 
let code=0;
let amount=0;
let payment=0;
let total=0;

New process remove shopping cart
if [ $(ls | grep -c 'shopping.cart') -ne 0 ]; then
    rm shopping.cart;
fi

###Order
#takes in a code and quantity, quantity can be negative
#

function order(){
#Check if this is the firstOrder
if [ "$firstOrder" = "0" ]; then
    touch shopping.cart;
    echo -e "-= SHOPPING CART =- 
Quantity\tCode\tPrice\tDescription" >> shopping.cart;
    firstOrder=1;
else
    sed -i '$d' shopping.cart;
fi

    if [ $(cat items.dat | grep -c "$code") -ne 0 ]; then
	echo -ne "$amount\t\t" >> shopping.cart;
	cat items.dat | grep -m 1 "$code" >> shopping.cart;
	cat shopping.cart;

	subtotal;
    fi
}

###Subtotal
#Calculate the total amount of the shopping cart
#
function subtotal(){
    printf "Subtotal: ";
    total=$(awk 'BEGIN {tot=0;} { tot +=  $1 * $3; } END { print tot;}' shopping.cart);
    printf "%.2f" "$total"
    echo ""
 
}

###abort
#restart a shopping cart transaction
#
function abort(){
    printf "abort Transaction (Yes/No)? ";
    read answer
    case $answer in
	[Yy]es) echo "Transaction has been Aborted "
	    rm shopping.cart;
	    firstOrder=0;
	    continue
	    ;;
	[Nn]o) echo "Transaction has not been Aborted "
	    continue
	    ;;
    esac
}

###finalize
#takes in the total amount of shopping cart
#minus it by the amount of payment entered
#If payment is greater than total call pdf
#
function finalize(){
    while true; do
        printf "Enter Payment (";
       	echo  "$total-$payment" | bc | tr -d '\\\n';
       	printf " remaining, blank to abort): ";
       	read selection;
	case $selection in
	    [0-9]*)
		payment=$(echo "$payment+$selection" | bc);
		check=$(echo "$payment>=$total" | bc -l);
       		if [ "$check" -eq 1 ]; then
		    echo -n "Change: "
       		    echo  "$payment-$total" | bc
		    pdf
		    break
		fi
	   	continue
		;;
	    '') break
		;;
	esac
    done
}

### PDF
# reformats shopping cart
# changes it into a pdf
#
function pdf(){
#deletes any items that have 0 quantities
touch temp
sed '/^0/d' shopping.cart > temp; mv temp shopping.cart 

#increase or decrease multiple numbers
cat shopping.cart | sort -n -k2 > temp; mv temp shopping.cart

#Delete negative numbers
sed '/^-/d' shopping.cart > temp; mv temp shopping.cart

#reformats, commas, and total
awk '{print $2,$4,$1,$3,$1*$3; OFS="."}' shopping.cart | sed '1d' | sed '1d'> .receipt

cat .receipt

pdflatex receipt < /dev/null > /dev/null
#open receipt.pdf
}

echo "$(basename $0), the (bash) Cash Register v0.1";

while true; do 
    printf "Section (h for help)? "
    selection='';
    code='';
    amount='';
    read selection code;
    case $selection in
	h) printf "\n-= HELP =-
Listing Items 
d\t\tlist by description
i\t\tlist by item number
p\t\tlist by price
Transactions
[[-]#] ####\tadd[[-]#] items with the specified 4-digit code 
a\t\tabort the transaction
f\t\tfinalize the transaction
Other
q\t\tquit this script\n"
	continue
	;;
	d) cat items.dat | sort -k3 | less
	continue
	;;
	i) cat items.dat | sort -n -k1 | less
	continue
	;;
	p) cat items.dat | sort -n -k2 | less
	continue
	;;
	[0-9][0-9][0-9][0-9])
	if [ "$code" = '' ]; then
	    code=$selection;
	    amount=1;
	    order
	fi
	continue
	;;
	[-,0-9]*) 
	if [ "$code" != '' ]; then
	    amount=$selection;
	    order
	fi
	continue
	;;
	a) abort
	continue
	;;
	f) finalize
	continue
	;;
	q)
	break
	;;
	*) echo $selection | egrep '([0-9]+)(?: ([0-9]{4}))' 
    esac
done

exit 0